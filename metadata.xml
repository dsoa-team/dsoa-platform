<ipojo xmlns:wbp="org.apache.felix.ipojo.whiteboard">

	<!-- ============================================================================================================ -->		
	<!-- ============================================================================================================ -->
	<!-- ========================== 			DSOA HANDLER COMPONENTS				   	   ========================== -->
	<!-- ============================================================================================================ -->
	<!-- ============================================================================================================ -->
	<!--  
		 
		 Service based applications can require and provide services. To handle these aspects, Dsoa Platform proposes
		 two components: ProviderManager and DependencyHandler. Together, these components are responsible for dynamically
		 managing application architecture. More specifically, they are in charge of  keeping the connections (wirings)
		 between application components.
		 
		 The ProviderManager component register the services that are provided by a component when it is valid and track its
		 execution br.ufpe.cin.dsoa.environment. In fact, each service that is provided explicitly states its requirements in terms of its
		 br.ufpe.cin.dsoa.environment and the quality that it should provide. When the br.ufpe.cin.dsoa.environment doesn't offer the required quality 
		 of service the changes the service configuration or unregister it (if it can not handle the current operation
		 condition.   
		 
		 The DependencyHandler component is responsible for supervising the quality of service currently provided by
		 the services that the application consumes. When the quality level is bellow the application expectations, it
		 searches for a replacement service.
		 
	-->
	<handler name="provides" namespace="br.ufpe.cin.dsoa" 
		classname="br.ufpe.cin.dsoa.platform.handler.provider.ProviderManager"  >
	</handler>

	<handler name="requires" namespace="br.ufpe.cin.dsoa"
		classname="br.ufpe.cin.dsoa.platform.handler.dependency.DependencyHandler" >
	</handler>
	
	<!-- ============================================================================================================ -->		
	<!-- ============================================================================================================ -->
	<!-- ========================== 			DSOA PLATFORM				========================================= -->
	<!-- ============================================================================================================ -->
	<!-- ============================================================================================================ -->
	<component 	name="Platform.Dsoa"
				classname="br.ufpe.cin.dsoa.platform.DsoaPlatform">
		<requires field="serviceRegistry" />
		<requires field="attributeCatalog" />
		<requires field="attEventMapperCatalog" />
		<requires field="eventTypeCatalog" />
		<requires field="agentCatalog" />
		<requires field="monitoringService" />
		<requires field="epService" />
		<requires field="eventDistribuitionService" />
		<provides/>
	</component>

	<!-- ============================================================================================================ -->		
	<!-- ============================================================================================================ -->
	<!-- ========================== 			DSOA METRIC COMPUTING COMPONENT		   	   ========================== -->
	<!-- ============================================================================================================ -->
	<!-- ============================================================================================================ -->
	<component 	name="Platform.Metric.MetricComputingComponent"
				classname="br.ufpe.cin.dsoa.platform.attribute.impl.AttributeManager">
		<provides />
	</component>
	<!--  
		 This component implements DSOA Attributes Catalog. It maintains a register of QoS attributes that are supported
		 by the platform.
	-->
		
	<!-- ============================================================================================================ -->		
	<!-- ============================================================================================================ -->
	<!-- ========================== 			DSOA SERVICE DISCOVERY	SERVICE		   	   ========================== -->
	<!-- ============================================================================================================ -->
	<!-- ============================================================================================================ -->
	<!-- 
		This component enables service discovery based on a non-functional specification containing QoS attributes. It
		ranks services according to a configurable RankingPolicy which can be modified at runtime
		-->
	<component 	name="Platform.Registry.QoSAwareRegistryComponent" 
				classname="br.ufpe.cin.dsoa.platform.registry.impl.OsgiServiceRegistry">
		<provides />
	</component>	
		
	<!-- ============================================================================================================ -->		
	<!-- ============================================================================================================ -->
	<!-- ========================== 			DSOA PLATFORM MONITORING SERVICE	   	   ========================== -->
	<!-- ============================================================================================================ -->
	<!-- ============================================================================================================ -->
	<!-- 
		This component is responsible for monitoring services that are registered in the platform. It reads the service
		non-functional specification, identify declared QoS attributes, and starts a monitor (an agent processing instance)
		that computes corresponding attribute values. It is important to mention that its monitoring action is passive, in the
		sense that the service DOESN'T generate artificial requests. It computes metrics based on InvocationEvents that
		are generated when the service is requested. In fact, it register agents in the EventProcessingService, which are 
		able to compute the corresponding metrics.
		-->
	<component 	name="Platform.Monitor.MonitoringComponent" 
				classname="br.ufpe.cin.dsoa.platform.monitor.impl.MonitoringServiceImpl">
		<requires field="eventProcessingService"  /> 
		<requires field="attributeCatalog"  /> 
		<requires field="attributeMapperCatalog"  />
		<provides/>
	</component>
	
	<!-- ============================================================================================================ -->		
	<!-- ============================================================================================================ -->
	<!-- ========================== 				DSOA VERIFIER SERVICE			   	   ========================== -->
	<!-- ============================================================================================================ -->
	<!-- ============================================================================================================ -->
	<!-- 
		
		-->
	<!-- <component 	name="Platform.Manager.Verifier" 
				classname="br.ufpe.cin.dsoa.platform.handler.dependency.manager.Analyzer">
		<requires field="attributeMapperCatalog"/>
		<requires field="eventProcessingService"/>
		<provides />
	</component> -->	
	
	<!-- ============================================================================================================ -->		
	<!-- ============================================================================================================ -->
	<!-- ========================== 			DSOA EVENT PROCESSING CENTER		   	   ========================== -->
	<!-- ============================================================================================================ -->
	<!-- ============================================================================================================ -->
	<!-- 
		This component implements DSOA event processing capability. It receives events from Event Producers through Event
		Channels. These events comprise streams that are connected through Event Processing Agents. These components filter,
		aggregate, and transform events generating new Event Streams that can be forwarded to Event Consumers that subscribe
		themselves to listen those events. The collection of Event Producers, Event Processing Agents, and Event Consumers 
		connected together compose Event Processing Networks. 
	 	-->
	 <!-- <composite name="Platform.Event.EventProcessingComponent">
		<instance component="Platform.Event.AgentCatalog" />
		<instance component="Platform.Event.EventTypeCatalog" />
		<instance component="Platform.Event.EventProcessingService" />
		<subservice action="import" 
             specification="org.osgi.service.event.EventAdmin"/>
		<provides action="export" specification="br.ufpe.cin.dsoa.platform.event.AgentCatalog"/>
		<provides action="export" specification="br.ufpe.cin.dsoa.platform.event.EventTypeCatalog"/>
		<provides action="export" specification="br.ufpe.cin.dsoa.platform.event.EventProcessingService"/>
	</composite> -->
	
	<!-- 
		This component implements a catalog that register the agents that are known by the platform and that can be used
		to build Event Processing Networks. 
	 	-->
	<component 	name="Platform.Event.AgentCatalog" 
				classname="br.ufpe.cin.dsoa.platform.event.impl.AgentCatalogImpl">
		<provides />
	</component>
	
	<component 	name="Platform.Event.EventTypeCatalog" 
				classname="br.ufpe.cin.dsoa.platform.event.impl.EventTypeCatalogImpl">
		<provides />
	</component>

	<component 	name="Platform.Event.EventProcessingService" 
				classname="br.ufpe.cin.dsoa.platform.event.impl.EsperProcessingService" >
		<requires field="eventTypeCatalog"/>
		<requires field="agentCatalog"/>
		<provides />
		<callback transition="validate" method="start" />
		<callback transition="invalidate" method="stop" />
	</component>
	
	
	<!-- ============================================================================================================ -->		
	<!-- ============================================================================================================ -->
	<!-- ========================== 			DSOA PLATFORM CONFIGURATOR 				   ========================== -->
	<!-- ============================================================================================================ -->
	<!-- ============================================================================================================ -->
	<!-- 
		This component is responsible for configuring the components that listen for platform extensions. It starts a 
		bundle listener that is responsible for continuously looking for declarative extensions (attributes, events, 
		and agents). This listener inspects	started	bundles and searches its entries trying to find configuration files. 
		In this context, it is an implementation of the "Extender Pattern". 
		The management service also starts a service tracker that listen service registrations in order to starting
		monitoring new services. So, when a remote service is registered, triggers the MonitoringService to start 
		service monitoring.
	 -->
	<component 	name="Platform.Configuration.ConfiguratorComponent" 
				classname="br.ufpe.cin.dsoa.platform.configurator.PlatformConfigurator">
		<requires field="attributeCatalog" />
		<requires field="attributeEventMapperCatalog" />
		<requires field="agentCatalog" />
		<requires field="eventTypeCatalog" />
		<requires field="epService" />
		<requires field="resourceManager" />
		<callback transition="validate" method="start" />
		<callback transition="invalidate" method="stop" />
	</component>


	<!-- ============================================================================================================ -->		
	<!-- ============================================================================================================ -->
	<!-- ========================== 			DSOA PLATFORM MANAGEMENT SERVICE		   ========================== -->
	<!-- ============================================================================================================ -->
	<!-- ============================================================================================================ -->
	<!-- 
		The ManagementService component is the DSOA's management Facade. It is responsible for providing an access point
		to perform management related activities. It is exposed as remote service in order to allow remote management. The
		other components are shell commands intended to allow local administration. 
	-->
	<component 	name="Platform.Management.ManagementComponent" 
				classname="br.ufpe.cin.dsoa.platform.management.impl.PlatformManagementServiceImpl">
		<requires field="attributeCatalog" />
		<requires field="agentCatalog" />
		<requires field="monitoringService" />
		<requires field="managementInfomationBase" />
		<provides >
			<property name="org.apache.cxf.ws.address"   value="http://localhost:9090/ManagementService"  	type="java.lang.String"/>
			<property name="service.exported.interfaces"  value="*"  type="java.lang.String"/>
			<property name="service.exported.configs"  value="org.apache.cxf.ws"  type="java.lang.String"/>
		</provides>
	</component>
	
	<component 	name="Platform.Management.ResourceManagerComponent" 
				classname="br.ufpe.cin.dsoa.platform.resource.impl.ResourceManagerImpl">
		<requires field="monitoringService" />
		<requires field="managementInfomationBase" />
		<requires field="epService" />
		<provides />
	</component>
	
	<!--
		Platform management information base
	-->
	<component name="Plataform.Management.InformationBase"
			   classname="br.ufpe.cin.dsoa.platform.management.impl.DsoaManagementInformationBase">
    	<provides/>
    </component>
	
	<!-- ============================================================================================================ -->		
	<!-- ============================================================================================================ -->
	<!-- ========================== 			DSOA MANAGEMENT SHELL 	 				   ========================== -->
	<!-- ============================================================================================================ -->
	<!-- ============================================================================================================ -->
	<!-- 
		This class is the root of DSOA's command shell. Every DSOA command should be enacted through 'dsoa' prefix,
 		so that this class is called to handle the command. In fact, it just delegate the responsibility of executing
 		the command itself to the OSGI's ShellCommand.
	-->
	<component name="Platform.Shell.DsoaShell" classname="br.ufpe.cin.dsoa.platform.management.shell.DsoaShell">
		<requires field="shellService" />
		<provides />
		<callback transition="validate" method="start" />
		<callback transition="invalidate" method="stop" />
	</component>
	
	<!-- ============================================================================================================ -->		
	<!-- ============================================================================================================ -->
	<!-- ========================== 			DSOA MANAGEMENT SHELL COMMANDS			   ========================== -->
	<!-- ============================================================================================================ -->
	<!-- ============================================================================================================ -->
	<!-- 
		Various shell components intended to enable local platform administration.
	-->
	<component name="Platform.Shell.ListAttributesCmd" classname="br.ufpe.cin.dsoa.platform.management.shell.ListAttributesCommand">
		<requires field="managementService"/>
		<provides />
	</component>
	
	<component name="Platform.Shell.ListAgentsCmd" classname="br.ufpe.cin.dsoa.platform.management.shell.ListAgentsCommand">
		<requires field="managementService"/>
		<provides />
	</component>
	
	<component name="Platform.Shell.ListServicesCmd" classname="br.ufpe.cin.dsoa.platform.management.shell.ListServicesCommand">
		<requires field="managementService"/>
		<provides />
	</component>
	
	<component name="Platform.Shell.ListServiceOperationsCmd" classname="br.ufpe.cin.dsoa.platform.management.shell.ListServiceOperationsCommand">
		<requires field="managementService"/>
		<provides />
	</component>
	
	<component name="Platform.Shell.AddMonitorCmd" classname="br.ufpe.cin.dsoa.platform.management.shell.AddMonitorCommand">
		<requires field="managementService"/>
		<provides />
	</component>
	
	<!-- ============================================================================================================ -->		
	<!-- ============================================================================================================ -->
	<!-- ========================== 			DSOA COMPONENT INSTANCES				   ========================== -->
	<!-- ============================================================================================================ -->
	<!-- ============================================================================================================ -->

	<instance component="Platform.Dsoa"/>
	
	<instance component="Platform.Event.EventProcessingComponent" />
	<instance component="Platform.Metric.MetricComputingComponent" />
	<instance component="Platform.Monitor.MonitoringComponent" />
	<instance component="Platform.Registry.QoSAwareRegistryComponent" />
	<instance component="Platform.Configuration.ConfiguratorComponent" />
	<instance component="Platform.Management.ManagementComponent" />
	<instance component="Platform.Management.ResourceManagerComponent" />
	<instance component="Plataform.Management.InformationBase" />
	<instance component="Platform.Manager.Verifier"/>
	
	<instance component="Platform.Shell.DsoaShell" />
	<instance component="Platform.Shell.ListAttributesCmd" />
	<instance component="Platform.Shell.ListAgentsCmd" />
	<instance component="Platform.Shell.ListServicesCmd" />
	<instance component="Platform.Shell.ListServiceOperationsCmd" />
	<instance component="Platform.Shell.AddMonitorCmd" />
	
	
	
	
	<instance component="Platform.Event.AgentCatalog" />
	<instance component="Platform.Event.EventTypeCatalog" />
	<instance component="Platform.Event.EventProcessingService" />
	
		
	<!-- <instance component="br.ufpe.cin.dsoa.platform.handler.dependency.manager.Analyzer"/> -->
	
	<!-- 	<instance component="Platform.Catalog.AgentCatalog" />
	<instance component="Platform.Catalog.AttributeCatalog" />
	<instance component="Platform.Catalog.AttributeEventMapperCatalog" />
	<instance component="Platform.Catalog.EventCatalog" />  -->
	
	
	

	<!-- <instance component="br.ufpe.cin.dsoa.platform.management.impl.PlatformManagementServiceImpl" /> -->
<!-- 	<instance component="br.ufpe.cin.dsoa.platform.attribute.impl.AttributeManager" />
	<instance component="br.ufpe.cin.dsoa.platform.configurator.DsoaServiceTracker" />
	<instance component="br.ufpe.cin.dsoa.platform.event.impl.EsperProcessingService" /> -->
	<!-- 
	<instance component="Platform.Registry.QoSAwareRegistryComponent"/>
	<instance component="br.ufpe.cin.dsoa.platform.handler.dependency.manager.Analyzer"/>
	<instance component="br.ufpe.cin.dsoa.resource.impl.MonitoredServiceListenerImpl"/> -->
	<!-- <instance component="br.ufpe.cin.dsoa.platform.configurator.DsoaFindHook" />  -->
	
	<!-- 	<composite name="Management.ManagementService">
		
		<subservice action="import" specification="org.apache.felix.shell.ShellService"/>
		<subservice action="import" specification="br.ufpe.cin.dsoa.platform.attribute.AttributeCatalog"/>
		<subservice action="import" specification="br.ufpe.cin.dsoa.resource.ResourceManagementService"/>

		<instance component="Management.DsoaShell" />
		<instance component="Management.ManagementServiceImpl" />
		
		<provides action="export" specification="org.apache.felix.shell.Command"/>
		<provides action="export" specification="br.ufpe.cin.dsoa.platform.management.PlatformManagementService"/>
		
	</composite>	 -->
	
</ipojo>
